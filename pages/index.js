import { useState, useEffect, useCallback } from "react";
import Head from "next/head";
import Banner from "../components/Banner";
import Header from "../components/Header";
import Card from "../components/UI/Card";

export default function Home() {
  const [enabled, setEnabled] = useState(false);
  const [jobData, setJobData] = useState([]);
  const [filteredJobData, setFilteredJobData] = useState([]);

  const [filterTitle, setFilterTitle] = useState("");
  const [filterLocation, setFilterLocation] = useState("");
  const [filterFulltime, setFilterFulltime] = useState(false);

  const [jobsDisplay, setJobsDisplay] = useState(12);

  const fetchJobsHandler = useCallback(async () => {
    const response = await fetch("data.json");
    const data = await response.json();

    const transformedJobsData = data.map((job) => {
      return {
        id: job.id,
        company: job.company,
        logo: job.logo,
        position: job.position,
        postedAt: job.postedAt,
        logoBackground: job.logoBackground,
        contract: job.contract,
        location: job.location,
      };
    });

    setJobData(transformedJobsData);
  }, []);

  useEffect(() => {
    fetchJobsHandler();
  }, [fetchJobsHandler]);

  useEffect(() => {
    let jobsByContract = jobData.filter((job) => {
      if (filterFulltime) {
        return job.contract === "Full Time";
      } else if (!filterFulltime) {
        return job;
      }
    });

    let jobsByTitle = jobsByContract.filter((job) => {
      if (
        job.position.toLowerCase().includes(filterTitle.toLowerCase()) ||
        job.company.toLowerCase().includes(filterTitle.toLowerCase())
      ) {
        return job;
      }
    });

    let jobsByLocation = jobsByTitle.filter((job) => {
      if (job.location.toLowerCase().includes(filterLocation.toLowerCase())) {
        return job;
      }
    });

    let finalFilteredJobs = jobsByLocation.slice(0, jobsDisplay);

    setFilteredJobData(finalFilteredJobs);
  }, [jobData, filterTitle, filterLocation, filterFulltime, jobsDisplay]);

  return (
    <div className={`${enabled && `dark`} flex h-screen flex-col`}>
      <div className='bg-lightgray transition-colors duration-300 ease-in-out dark:bg-midnight'>
        <Head>
          <title>devjobs</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/assets/favicon-32x32.png' />
        </Head>
        <Banner />
        <Header
          enabled={enabled}
          setEnabled={setEnabled}
          title={filterTitle}
          setTitle={setFilterTitle}
          location={filterLocation}
          setLocation={setFilterLocation}
          fulltime={filterFulltime}
          setFulltime={setFilterFulltime}
        />
        {jobData.length > 0 && (
          <main className='mx-6 mb-8 mt-14 grid grid-cols-1 gap-y-12 sm:mx-auto sm:mb-14 sm:mt-[70px] sm:max-w-[1190px] sm:grid-cols-2 sm:gap-x-3 sm:gap-y-16 sm:px-10 lg:mt-[105px] lg:grid-cols-3 lg:gap-x-[30px]'>
            {filteredJobData.map((job) => {
              return <Card key={job.id} jobData={job} />;
            })}
          </main>
        )}
      </div>
      <div className='flex-auto bg-lightgray transition-colors duration-300 ease-in-out dark:bg-midnight'>
        <button
          className={`${
            jobsDisplay > filteredJobData.length && `hidden`
          } mx-auto mb-[62px] flex h-12 cursor-pointer items-center rounded-[5px] bg-violet hover:bg-lightviolet`}
          onClick={() => {
            setJobsDisplay(jobsDisplay + 12);
          }}
        >
          <h5 className='px-9 text-white md:flex'>Load More</h5>
        </button>
      </div>
    </div>
  );
}
